{
  "extensions\/array.html?swift" : {
    "abstract" : "These methods are available only when the array Element type conforms\nto RbObjectConvertible.",
    "name" : "Array"
  },
  "extensions\/array.html?swift#init_10" : {
    "abstract" : "Try to get a Array representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Array"
  },
  "extensions\/array.html?swift#rubyobject8" : {
    "abstract" : "Create a Ruby array object for this Array.",
    "name" : "rubyObject",
    "parent_name" : "Array"
  },
  "extensions\/arrayslice.html?swift" : {
    "abstract" : "These methods are available only when the array slice Element type\nconforms to RbObjectConvertible.",
    "name" : "ArraySlice"
  },
  "extensions\/arrayslice.html?swift#rubyobject9" : {
    "abstract" : "Create a Ruby array object for this ArraySlice.  All the sliceness\nis lost by this conversion, there’s no ongoing relation between the Swift\nand Ruby types.",
    "name" : "rubyObject",
    "parent_name" : "ArraySlice"
  },
  "extensions\/bool.html?swift" : {
    "abstract" : "A value type whose instances are either true or false.",
    "name" : "Bool"
  },
  "extensions\/bool.html?swift#init_6" : {
    "abstract" : "Try to get a Bool representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Bool"
  },
  "extensions\/bool.html?swift#rubyobject4" : {
    "abstract" : "A Ruby object for the boolean value.",
    "name" : "rubyObject",
    "parent_name" : "Bool"
  },
  "extensions\/closedrange.html?swift" : {
    "abstract" : "These methods are available only when the range Bound type conforms to\nRbObjectConvertible.",
    "name" : "ClosedRange"
  },
  "extensions\/closedrange.html?swift#init_15" : {
    "abstract" : "Try to get a ClosedRange from a Ruby range object.",
    "name" : "init(_:)",
    "parent_name" : "ClosedRange"
  },
  "extensions\/closedrange.html?swift#rubyobject13" : {
    "abstract" : "A Ruby object for the range.",
    "name" : "rubyObject",
    "parent_name" : "ClosedRange"
  },
  "extensions\/dictionary.html?swift" : {
    "abstract" : "These methods are available only when both the dictionary Key and Value\ntypes conform to RbObjectConvertible.",
    "name" : "Dictionary"
  },
  "extensions\/dictionary.html?swift#init_12" : {
    "abstract" : "Try to get a Dictionary representation of an RbObject that is a Ruby hash.",
    "name" : "init(_:)",
    "parent_name" : "Dictionary"
  },
  "extensions\/dictionary.html?swift#rubyobject10" : {
    "abstract" : "Create a Ruby hash object for this Dictionary.",
    "name" : "rubyObject",
    "parent_name" : "Dictionary"
  },
  "extensions\/double.html?swift" : {
    "abstract" : "A double-precision, floating-point value type.",
    "name" : "Double"
  },
  "extensions\/double.html?swift#init_9" : {
    "abstract" : "Try to get a Double floating-point representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Double"
  },
  "extensions\/double.html?swift#rubyobject7" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Double"
  },
  "extensions\/float.html?swift" : {
    "abstract" : "A single-precision, floating-point value type.",
    "name" : "Float"
  },
  "extensions\/float.html?swift#init_25" : {
    "abstract" : "Try to get a Float floating-point representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Float"
  },
  "extensions\/float.html?swift#rubyobject24" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Float"
  },
  "extensions\/int.html?swift" : {
    "abstract" : "A signed integer value type.",
    "name" : "Int"
  },
  "extensions\/int.html?swift#init_8" : {
    "abstract" : "Try to get an signed integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Int"
  },
  "extensions\/int.html?swift#rubyobject6" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Int"
  },
  "extensions\/int8.html?swift" : {
    "abstract" : "An 8-bit signed integer value type.",
    "name" : "Int8"
  },
  "extensions\/int8.html?swift#init_24" : {
    "abstract" : "Try to get an 8-bit signed integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Int8"
  },
  "extensions\/int8.html?swift#rubyobject23" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Int8"
  },
  "extensions\/int16.html?swift" : {
    "abstract" : "A 16-bit signed integer value type.",
    "name" : "Int16"
  },
  "extensions\/int16.html?swift#init_23" : {
    "abstract" : "Try to get a 16-bit signed integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Int16"
  },
  "extensions\/int16.html?swift#rubyobject22" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Int16"
  },
  "extensions\/int32.html?swift" : {
    "abstract" : "A 32-bit signed integer value type.",
    "name" : "Int32"
  },
  "extensions\/int32.html?swift#init_22" : {
    "abstract" : "Try to get a 32-bit signed integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Int32"
  },
  "extensions\/int32.html?swift#rubyobject21" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Int32"
  },
  "extensions\/int64.html?swift" : {
    "abstract" : "A 64-bit signed integer value type.",
    "name" : "Int64"
  },
  "extensions\/int64.html?swift#init_21" : {
    "abstract" : "Try to get a 64-bit signed integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Int64"
  },
  "extensions\/int64.html?swift#rubyobject20" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "Int64"
  },
  "extensions\/range.html?swift" : {
    "abstract" : "These methods are available only when the range Bound type conforms to\nRbObjectConvertible.",
    "name" : "Range"
  },
  "extensions\/range.html?swift#init_14" : {
    "abstract" : "Try to get a Range from a Ruby range object.",
    "name" : "init(_:)",
    "parent_name" : "Range"
  },
  "extensions\/range.html?swift#rubyobject12" : {
    "abstract" : "A Ruby object for the range.",
    "name" : "rubyObject",
    "parent_name" : "Range"
  },
  "extensions\/set.html?swift" : {
    "abstract" : "These methods are available only when the set Element type conforms\nto RbObjectConvertible.",
    "name" : "Set"
  },
  "extensions\/set.html?swift#init_16" : {
    "abstract" : "Try to get a Set representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "Set"
  },
  "extensions\/set.html?swift#rubyobject14" : {
    "abstract" : "Create a Ruby set object for this Set.",
    "name" : "rubyObject",
    "parent_name" : "Set"
  },
  "extensions\/string.html?swift" : {
    "abstract" : "A Unicode string value that is a collection of characters.",
    "name" : "String"
  },
  "extensions\/string.html?swift#init_5" : {
    "abstract" : "Try to get a String representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "String"
  },
  "extensions\/string.html?swift#rubyobject3" : {
    "abstract" : "A Ruby object for the string.",
    "name" : "rubyObject",
    "parent_name" : "String"
  },
  "extensions\/uint.html?swift" : {
    "abstract" : "An unsigned integer value type.",
    "name" : "UInt"
  },
  "extensions\/uint.html?swift#init_7" : {
    "abstract" : "Try to get an unsigned integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "UInt"
  },
  "extensions\/uint.html?swift#rubyobject5" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "UInt"
  },
  "extensions\/uint8.html?swift" : {
    "abstract" : "An 8-bit unsigned integer value type.",
    "name" : "UInt8"
  },
  "extensions\/uint8.html?swift#init_20" : {
    "abstract" : "Try to get an 8-bit unsigned integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "UInt8"
  },
  "extensions\/uint8.html?swift#rubyobject19" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "UInt8"
  },
  "extensions\/uint16.html?swift" : {
    "abstract" : "A 16-bit unsigned integer value type.",
    "name" : "UInt16"
  },
  "extensions\/uint16.html?swift#init_19" : {
    "abstract" : "Try to get a 16-bit unsigned integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "UInt16"
  },
  "extensions\/uint16.html?swift#rubyobject18" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "UInt16"
  },
  "extensions\/uint32.html?swift" : {
    "abstract" : "A 32-bit unsigned integer value type.",
    "name" : "UInt32"
  },
  "extensions\/uint32.html?swift#init_18" : {
    "abstract" : "Try to get a 32-bit unsigned integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "UInt32"
  },
  "extensions\/uint32.html?swift#rubyobject17" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "UInt32"
  },
  "extensions\/uint64.html?swift" : {
    "abstract" : "A 64-bit unsigned integer value type.",
    "name" : "UInt64"
  },
  "extensions\/uint64.html?swift#init_17" : {
    "abstract" : "Try to get a 64-bit unsigned integer representation of an RbObject.",
    "name" : "init(_:)",
    "parent_name" : "UInt64"
  },
  "extensions\/uint64.html?swift#rubyobject16" : {
    "abstract" : "A Ruby object for the number.",
    "name" : "rubyObject",
    "parent_name" : "UInt64"
  },
  "other-apis.html?swift#rbblockcallback" : {
    "abstract" : "The type of a block implemented in Swift.",
    "name" : "RbBlockCallback"
  },
  "swift-method-apis.html?swift#rbboundmethodcallback" : {
    "abstract" : "The function signature for a Ruby method implemented as a Swift method of\na Swift bound object that returns a value.",
    "name" : "RbBoundMethodCallback"
  },
  "swift-method-apis.html?swift#rbboundmethodvoidcallback" : {
    "abstract" : "The function signature for a Ruby method implemented as a Swift method of\na Swift bound object that does not return a value.",
    "name" : "RbBoundMethodVoidCallback"
  },
  "swift-method-apis.html?swift#rbmethodcallback" : {
    "abstract" : "The function signature for a Ruby method implemented as a Swift free function\nor closure.",
    "name" : "RbMethodCallback"
  },
  "types\/rbblockretention.html?swift" : {
    "abstract" : "Control over how Swift closures passed as blocks are retained.",
    "name" : "RbBlockRetention"
  },
  "types\/rbblockretention.html?swift#none" : {
    "abstract" : "Do not retain the closure.  The default, appropriate when the block\nis used only during execution of the method it is passed to.  For\nexample #each.",
    "name" : "none",
    "parent_name" : "RbBlockRetention"
  },
  "types\/rbblockretention.html?swift#returned" : {
    "abstract" : "Retain the closure for as long as the object returned by the method.\nUse when the method is a factory that produces some object and passes\nthat object the closure.  For example Proc#new.",
    "name" : "returned",
    "parent_name" : "RbBlockRetention"
  },
  "types\/rbblockretention.html?swift#self" : {
    "abstract" : "Retain the closure for as long as the object that owns the method.\nUse when a method stores a closure in an object property for later use.",
    "name" : "self",
    "parent_name" : "RbBlockRetention"
  },
  "types\/rbbreak.html?swift" : {
    "abstract" : "Throwing an instance of this type terminates and gives an overall\nresult to a Ruby block-based iteration like the Ruby break keyword.",
    "name" : "RbBreak"
  },
  "types\/rbbreak.html?swift#initwith" : {
    "abstract" : "Create an object to break out from a Ruby iterator.",
    "name" : "init(with:)",
    "parent_name" : "RbBreak"
  },
  "types\/rbcomplex.html?swift" : {
    "abstract" : "A simple interface to Ruby’s complex number support.",
    "name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#imaginary" : {
    "abstract" : "The imaginary part of the complex number.",
    "name" : "imaginary",
    "parent_name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#init_1" : {
    "abstract" : "Create a complex number from a Ruby object.",
    "name" : "init(_:)",
    "parent_name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#init_2" : {
    "abstract" : "Convert some Swift data type to a complex number.",
    "name" : "init(_:)",
    "parent_name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#initrealimaginary" : {
    "abstract" : "Create a new complex number from real and imaginary parts.",
    "name" : "init(real:imaginary:)",
    "parent_name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#real" : {
    "abstract" : "The real part of the complex number.",
    "name" : "real",
    "parent_name" : "RbComplex"
  },
  "types\/rbcomplex.html?swift#rubyobject" : {
    "abstract" : "Get a Ruby version of an RbComplex.",
    "name" : "rubyObject",
    "parent_name" : "RbComplex"
  },
  "types\/rberror.html?swift" : {
    "abstract" : "An error raised by the RubyGateway module.  Ruby exceptions\ngenerate RbError.rubyException(_:), unusual Ruby flow control\ngenerates RbError.rubyJump(_:), and the other cases correspond\nto error conditions encountered by the Swift software.",
    "name" : "RbError"
  },
  "types\/rberror.html?swift#badidentifiertypeid" : {
    "abstract" : "An identifier looks to be spelt wrong.",
    "name" : "badIdentifier(type:id:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#badparameter_" : {
    "abstract" : "A value passed to the library is out of range for some reason.",
    "name" : "badParameter(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#badtype_" : {
    "abstract" : "An object has the wrong type for an operation.",
    "name" : "badType(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#description" : {
    "abstract" : "A human-readable description of the error.",
    "name" : "description",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#duplicatekwarg_" : {
    "abstract" : "A keyword argument is duplicated.",
    "name" : "duplicateKwArg(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#history1" : {
    "abstract" : "A short history of errors thrown by RubyGateway",
    "name" : "history",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#rubyexception_" : {
    "abstract" : "A Ruby exception occurred.",
    "name" : "rubyException(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#rubyjump_" : {
    "abstract" : "Some Ruby flow control has happened.",
    "name" : "rubyJump(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror.html?swift#setup_" : {
    "abstract" : "The Ruby VM could not be set up.",
    "name" : "setup(_:)",
    "parent_name" : "RbError"
  },
  "types\/rberror\/history.html?swift" : {
    "abstract" : "Holds the most recent errors thrown by RubyGateway.",
    "name" : "History",
    "parent_name" : "RbError"
  },
  "types\/rberror\/history.html?swift#clear" : {
    "abstract" : "Clear the error history.",
    "name" : "clear()",
    "parent_name" : "History"
  },
  "types\/rberror\/history.html?swift#errors" : {
    "abstract" : "The error history.",
    "name" : "errors",
    "parent_name" : "History"
  },
  "types\/rberror\/history.html?swift#mostrecent" : {
    "abstract" : "The most recent error encountered by RubyGateway.",
    "name" : "mostRecent",
    "parent_name" : "History"
  },
  "types\/rbexception.html?swift" : {
    "abstract" : "A Ruby exception.",
    "name" : "RbException"
  },
  "types\/rbexception.html?swift#backtrace" : {
    "abstract" : "The backtrace from the Ruby exception",
    "name" : "backtrace",
    "parent_name" : "RbException"
  },
  "types\/rbexception.html?swift#description1" : {
    "abstract" : "The exception’s message",
    "name" : "description",
    "parent_name" : "RbException"
  },
  "types\/rbexception.html?swift#exception" : {
    "abstract" : "The underlying Ruby exception object",
    "name" : "exception",
    "parent_name" : "RbException"
  },
  "types\/rbexception.html?swift#initmessage" : {
    "abstract" : "Construct a new Ruby RuntimeError exception with the given message.",
    "name" : "init(message:)",
    "parent_name" : "RbException"
  },
  "types\/rbfailableaccess.html?swift" : {
    "abstract" : "A way to call Ruby methods and so on with a different error-handling style\nto the try\/catch approach of RbObjectAccess: the methods return nil in failure\ncases instead of throwing errors.  Get hold of this failable interface using\nRbObject.failable or RbGateway.failable:",
    "name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#call_argskwargs" : {
    "abstract" : "Call a method of a Ruby object.",
    "name" : "call(_:args:kwArgs:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#call_argskwargsblock" : {
    "abstract" : "Call a method of a Ruby object passing a Ruby Proc as a block.",
    "name" : "call(_:args:kwArgs:block:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#call_argskwargsblockcall" : {
    "abstract" : "Call a method of a Ruby object passing Swift code as a block used immediately.",
    "name" : "call(_:args:kwArgs:blockCall:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#call_argskwargsblockretentionblockcall" : {
    "abstract" : "Call a method of a Ruby object passing Swift code as a block.",
    "name" : "call(_:args:kwArgs:blockRetention:blockCall:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#callsymbolargskwargs" : {
    "abstract" : "Call a method of a Ruby object using a symbol.",
    "name" : "call(symbol:args:kwArgs:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#callsymbolargskwargsblock" : {
    "abstract" : "Call a method of a Ruby object using a symbol passing a Ruby Proc as a block.",
    "name" : "call(symbol:args:kwArgs:block:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#callsymbolargskwargsblockcall" : {
    "abstract" : "Call a method of a Ruby object using a symbol passing Swift code as a block used immediately.",
    "name" : "call(symbol:args:kwArgs:blockCall:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#callsymbolargskwargsblockretentionblockcall" : {
    "abstract" : "Call a method of a Ruby object using a symbol passing Swift code as a block.",
    "name" : "call(symbol:args:kwArgs:blockRetention:blockCall:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#get_" : {
    "abstract" : "Get some kind of Ruby object based on the name parameter.",
    "name" : "get(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getattribute_" : {
    "abstract" : "Get an attribute of a Ruby object.",
    "name" : "getAttribute(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getclass_" : {
    "abstract" : "Get an RbObject that represents a Ruby class.",
    "name" : "getClass(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getclassvar_" : {
    "abstract" : "Get the value of a Ruby class variable.",
    "name" : "getClassVar(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getconstant_" : {
    "abstract" : "Get an RbObject that represents a Ruby constant.",
    "name" : "getConstant(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getglobalvar_" : {
    "abstract" : "Get the value of a Ruby global variable.",
    "name" : "getGlobalVar(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#getinstancevar_" : {
    "abstract" : "Get the value of a Ruby instance variable.",
    "name" : "getInstanceVar(_:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#setattribute_newvalue" : {
    "abstract" : "Set an attribute of a Ruby object.",
    "name" : "setAttribute(_:newValue:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#setclassvar_newvalue" : {
    "abstract" : "Set or create a Ruby class variable.",
    "name" : "setClassVar(_:newValue:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#setconstant_newvalue" : {
    "abstract" : "Bind an object to a constant name.",
    "name" : "setConstant(_:newValue:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#setglobalvar_newvalue" : {
    "abstract" : "Set a Ruby global variable.",
    "name" : "setGlobalVar(_:newValue:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbfailableaccess.html?swift#setinstancevar_newvalue" : {
    "abstract" : "Set a Ruby instance variable.",
    "name" : "setInstanceVar(_:newValue:)",
    "parent_name" : "RbFailableAccess"
  },
  "types\/rbgateway1.html?swift" : {
    "abstract" : "Provides top-level Ruby services: information about the Ruby VM, evaluate\nexpressions, access various kinds of Ruby objects, and define new Ruby\nclasses, modules, and functions.",
    "name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#apiversion" : {
    "abstract" : "The component major\/minor\/teeny version numbers of Ruby being used.",
    "name" : "apiVersion",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#cleanup" : {
    "abstract" : "Explicitly shut down Ruby and release resources.\nThis includes calling END{} code and procs registered by Kernel.#at_exit.",
    "name" : "cleanup()",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#debug" : {
    "abstract" : "Debug mode for Ruby code, sets $DEBUG \/ $-d.",
    "name" : "debug",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#defineclass_parentunder" : {
    "abstract" : "Define a new, empty, Ruby class.",
    "name" : "defineClass(_:parent:under:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#defineclass_underinitializer" : {
    "abstract" : "Define a new, empty, Ruby class associated with a Swift class.",
    "name" : "defineClass(_:under:initializer:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#defineglobalfunction_argsspecbody" : {
    "abstract" : "Define a global function that can use positional, keyword, and optional\narguments as well as splatting.  The function can also be passed a block.",
    "name" : "defineGlobalFunction(_:argsSpec:body:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#defineglobalvar_get" : {
    "abstract" : "Create a readonly Ruby global variable implemented by Swift code.",
    "name" : "defineGlobalVar(_:get:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#defineglobalvar_getset" : {
    "abstract" : "Create a read-write Ruby global variable implemented by Swift code.",
    "name" : "defineGlobalVar(_:get:set:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#definemodule_under" : {
    "abstract" : "Define a new, empty, Ruby module.",
    "name" : "defineModule(_:under:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#evalruby" : {
    "abstract" : "Evaluate some Ruby and return the result.",
    "name" : "eval(ruby:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#getidfor" : {
    "abstract" : "Get an ID ready to call a method, for example.",
    "name" : "getID(for:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#getinstancevar_1" : {
    "abstract" : "Get the value of a top-level instance variable.  Creates a new one with a nil\nvalue if it doesn’t exist yet.",
    "name" : "getInstanceVar(_:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#loadfilenamewrap" : {
    "abstract" : "See Ruby Kernel#load. Load a file, reloads if already loaded.",
    "name" : "load(filename:wrap:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#requirefilename" : {
    "abstract" : "Load a Ruby file once-only.  See Kernel#require, but note this\nmethod is dispatched dynamically so it will invoke any replacements of\nrequire.",
    "name" : "require(filename:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#scriptname" : {
    "abstract" : "Value of Ruby $PROGRAM_NAME \/ $0.",
    "name" : "scriptName",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#setarguments_" : {
    "abstract" : "Set the program arguments for the Ruby VM.",
    "name" : "setArguments(_:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#setinstancevar_newvalue1" : {
    "abstract" : "Set a top-level instance variable.  Creates a new one if it doesn’t exist yet.",
    "name" : "setInstanceVar(_:newValue:)",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#softsetup" : {
    "abstract" : "Attempt to initialize Ruby but swallow any error.",
    "name" : "softSetup()",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#verbose" : {
    "abstract" : "Verbose mode for Ruby code, sets $VERBOSE \/ $-v.",
    "name" : "verbose",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#version" : {
    "abstract" : "The version number triple of Ruby being used, for example 2.5.0.",
    "name" : "version",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1.html?swift#versiondescription" : {
    "abstract" : "The full version string for the Ruby being used.",
    "name" : "versionDescription",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1\/verbosity.html?swift" : {
    "abstract" : "Verbosity setting for Ruby scripts - affects Kernel#warn etc.",
    "name" : "Verbosity",
    "parent_name" : "RbGateway"
  },
  "types\/rbgateway1\/verbosity.html?swift#full" : {
    "abstract" : "Full verbosity mode.",
    "name" : "full",
    "parent_name" : "Verbosity"
  },
  "types\/rbgateway1\/verbosity.html?swift#medium" : {
    "abstract" : "Medium verbosity mode.  The Ruby default.",
    "name" : "medium",
    "parent_name" : "Verbosity"
  },
  "types\/rbgateway1\/verbosity.html?swift#none1" : {
    "abstract" : "Silent verbosity mode.",
    "name" : "none",
    "parent_name" : "Verbosity"
  },
  "types\/rbmethod.html?swift" : {
    "abstract" : "This offers useful services to Swift implementations of Ruby methods.",
    "name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#args2" : {
    "abstract" : "The arguments passed to the method, decoded according to the method’s RbMethodArgsSpec.",
    "name" : "args",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#argsspec1" : {
    "abstract" : "The method’s arguments specification, originally set by the user at the point the method was defined.",
    "name" : "argsSpec",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#callsuperargskwargs" : {
    "abstract" : "Call the overridden version of the current method.",
    "name" : "callSuper(args:kwArgs:)",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#captureblock" : {
    "abstract" : "Get the method’s block as a Ruby Proc.",
    "name" : "captureBlock()",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#isblockgiven" : {
    "abstract" : "Has the method been passed a block?",
    "name" : "isBlockGiven",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#needsblock" : {
    "abstract" : "Raise an exception if the method has not been passed a block.",
    "name" : "needsBlock()",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#rubyself" : {
    "abstract" : "The object against which the method has been invoked.",
    "name" : "rubySelf",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethod.html?swift#yieldblockargskwargs" : {
    "abstract" : "Invoke the method’s block and get the result.",
    "name" : "yieldBlock(args:kwArgs:)",
    "parent_name" : "RbMethod"
  },
  "types\/rbmethodargs.html?swift" : {
    "abstract" : "The various types of argument passed to a Ruby method implemented in Swift.",
    "name" : "RbMethodArgs"
  },
  "types\/rbmethodargs.html?swift#keyword" : {
    "abstract" : "The keyword arguments to the method.  If caller omitted any keyword arguments\nwith default values then they are created from the RbMethodArgsSpec.",
    "name" : "keyword",
    "parent_name" : "RbMethodArgs"
  },
  "types\/rbmethodargs.html?swift#mandatory" : {
    "abstract" : "The mandatory positional arguments to the method, comprising the\nleading mandatory arguments followed by the trailing mandatory arguments.",
    "name" : "mandatory",
    "parent_name" : "RbMethodArgs"
  },
  "types\/rbmethodargs.html?swift#optional1" : {
    "abstract" : "The optional positional arguments to the method.  If caller did not\nprovide a value for any of these then their values are created from the\nRbMethodArgsSpec.",
    "name" : "optional",
    "parent_name" : "RbMethodArgs"
  },
  "types\/rbmethodargs.html?swift#splatted" : {
    "abstract" : "The splatted (variable length) arguments to the method.",
    "name" : "splatted",
    "parent_name" : "RbMethodArgs"
  },
  "types\/rbmethodargsspec.html?swift" : {
    "abstract" : "A description of how a Ruby method implemented in Swift is supposed to be called.",
    "name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#basic_" : {
    "abstract" : "Helper to quickly create a spec for a method with a fixed number of arguments.",
    "name" : "basic(_:)",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#initleadingmandatorycountoptionalvaluessupportssplattrailingmandatorycountmandatorykeywordsoptionalkeywordvaluesrequiresblock" : {
    "abstract" : "Create a new method arguments specification.",
    "name" : "init(leadingMandatoryCount:optionalValues:supportsSplat:trailingMandatoryCount:mandatoryKeywords:optionalKeywordValues:requiresBlock:)",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#leadingmandatorycount" : {
    "abstract" : "The number of leading mandatory positional arguments.",
    "name" : "leadingMandatoryCount",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#mandatorykeywords" : {
    "abstract" : "Names of mandatory keyword arguments.",
    "name" : "mandatoryKeywords",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#optionalcount" : {
    "abstract" : "The number of optional positional arguments.",
    "name" : "optionalCount",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#optionalkeywordvalues" : {
    "abstract" : "Names and default values of optional keyword arguments.",
    "name" : "optionalKeywordValues",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#optionalvalues" : {
    "abstract" : "Default values for all optional positional arguments.",
    "name" : "optionalValues",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#requiresblock" : {
    "abstract" : "Does the method require a block?",
    "name" : "requiresBlock",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#supportskeywords" : {
    "abstract" : "Does the method support keyword arguments?",
    "name" : "supportsKeywords",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#supportssplat" : {
    "abstract" : "Does the method support variable-length splatted arguments?",
    "name" : "supportsSplat",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#totalmandatorycount" : {
    "abstract" : "The number of all mandatory positional arguments.",
    "name" : "totalMandatoryCount",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbmethodargsspec.html?swift#trailingmandatorycount" : {
    "abstract" : "The number of trailing mandatory positional arguments.",
    "name" : "trailingMandatoryCount",
    "parent_name" : "RbMethodArgsSpec"
  },
  "types\/rbobject13.html?swift" : {
    "abstract" : "A Ruby object.",
    "name" : "RbObject"
  },
  "types\/rbobject13.html?swift#collection" : {
    "abstract" : "A view onto the Ruby object using Swift collection APIs.",
    "name" : "collection",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#convert" : {
    "abstract" : "Convert an RbObject to some Swift type.",
    "name" : "convert()",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#convertto" : {
    "abstract" : "Convert an RbObject to some Swift type.",
    "name" : "convert(to:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#debugdescription" : {
    "abstract" : "A developer-appropriate string representation of the Ruby object.",
    "name" : "debugDescription",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#definemethod_argsspecbody" : {
    "abstract" : "Add or replace a method in all instances of the Ruby class.",
    "name" : "defineMethod(_:argsSpec:body:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#definemethod_argsspecmethod" : {
    "abstract" : "Add or replace a method in all instances of the Ruby class.",
    "name" : "defineMethod(_:argsSpec:method:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#definemethod_argsspecmethod1" : {
    "abstract" : "Add or replace a method in all instances of the Ruby class.",
    "name" : "defineMethod(_:argsSpec:method:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#definesingletonmethod_argsspecbody" : {
    "abstract" : "Add or replace a method in the Ruby object’s singleton class.",
    "name" : "defineSingletonMethod(_:argsSpec:body:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#description2" : {
    "abstract" : "A string representation of the Ruby object.",
    "name" : "description",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#extendmodule" : {
    "abstract" : "Add methods from a module to the singleton class of this object.",
    "name" : "extend(module:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#getboundobjecttype" : {
    "abstract" : "Retrieve the Swift object bound to this Ruby object.",
    "name" : "getBoundObject(type:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#hashinto1" : {
    "abstract" : "The hash value for the Ruby object.",
    "name" : "hash(into:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#includemodule" : {
    "abstract" : "Add methods from a module to a class such that methods from the class\noverride any that match in the module.",
    "name" : "include(module:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#init_4" : {
    "abstract" : "Create an RbObject from a Swift type.",
    "name" : "init(_:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#init_26" : {
    "abstract" : "Create another Swift reference to an existing RbObject.",
    "name" : "init(_:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initarrayliteral" : {
    "abstract" : "Creates an RbObject from an array literal.",
    "name" : "init(arrayLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initblockcall" : {
    "abstract" : "Create a Ruby Proc object from a Swift closure.",
    "name" : "init(blockCall:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initbooleanliteral" : {
    "abstract" : "Creates an RbObject from a boolean literal.",
    "name" : "init(booleanLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initdictionaryliteral" : {
    "abstract" : "Creates an RbObject from a dictionary literal.",
    "name" : "init(dictionaryLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initexactly" : {
    "abstract" : "Create a Ruby object from some type conforming to BinaryInteger",
    "name" : "init(exactly:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initfloatliteral" : {
    "abstract" : "Creates an RbObject from a floating-point literal.",
    "name" : "init(floatLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initintegerliteral" : {
    "abstract" : "Creates an RbObject from an integer literal.",
    "name" : "init(integerLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initofclassargskwargs" : {
    "abstract" : "Create an instance of a given Ruby class.",
    "name" : "init(ofClass:args:kwArgs:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initofclassargskwargsblockcall" : {
    "abstract" : "Create an instance of a given Ruby class passing a Swift closure as a block.",
    "name" : "init(ofClass:args:kwArgs:blockCall:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initofclassargskwargsretainblockblockcall" : {
    "abstract" : "Create an instance of a given Ruby class passing a Swift closure as a block.",
    "name" : "init(ofClass:args:kwArgs:retainBlock:blockCall:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initrubyvalue" : {
    "abstract" : "Wrap up a Ruby object using the its VALUE API handle.",
    "name" : "init(rubyValue:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#initstringliteral" : {
    "abstract" : "Creates an RbObject from a string literal.",
    "name" : "init(stringLiteral:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#isnil" : {
    "abstract" : "Is the Ruby object nil?",
    "name" : "isNil",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#istruthy" : {
    "abstract" : "Is the Ruby object truthy?",
    "name" : "isTruthy",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#magnitude1" : {
    "abstract" : "The magnitude of the value.",
    "name" : "magnitude",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#nilobject" : {
    "abstract" : "An RbObject that means nil to Ruby.",
    "name" : "nilObject",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#playgrounddescription" : {
    "abstract" : "The text from description.",
    "name" : "playgroundDescription",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#prependmodule" : {
    "abstract" : "Add methods from a module to a class such that methods from the module\noverride any that match in the class.",
    "name" : "prepend(module:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject" : {
    "abstract" : "Returns a Boolean value indicating whether two values are equal.",
    "name" : "==(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject1" : {
    "abstract" : "Returns a Boolean value indicating whether the value of the first\nargument is less than that of the second argument.",
    "name" : "<(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject2" : {
    "abstract" : "Subtraction operator for RbObjects.",
    "name" : "-(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject3" : {
    "abstract" : "Addition operator for RbObjects.",
    "name" : "+(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject4" : {
    "abstract" : "Multiplication operator for RbObjects.",
    "name" : "*(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject5" : {
    "abstract" : "Division operator for RbObjects.",
    "name" : "\/(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject-rbobject6" : {
    "abstract" : "Remainder operator for RbObjects.",
    "name" : "%(RbObject, RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject18" : {
    "abstract" : "Addition-assignment operator for RbObjects.",
    "name" : "+=(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject19" : {
    "abstract" : "Subtraction-assignment operator for RbObjects.",
    "name" : "-=(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject20" : {
    "abstract" : "Multiplication-assignment operator for RbObjects.",
    "name" : "*=(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject21" : {
    "abstract" : "Division-assignment operator for RbObjects.",
    "name" : "\/=(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject22" : {
    "abstract" : "Remainder-assignment operator for RbObjects.",
    "name" : "%=(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject23" : {
    "abstract" : "The negated version of the value.",
    "name" : "-(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rbobject24" : {
    "abstract" : "Unary plus operator.",
    "name" : "+(RbObject)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#rubytype" : {
    "abstract" : "The Ruby type of this object.  This is a fairly unfriendly enum but\nmight be useful for debugging.",
    "name" : "rubyType",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#subscript_2" : {
    "abstract" : "Subscript operator, supports both get + set.",
    "name" : "subscript(_:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobject13.html?swift#withrubyvaluecall" : {
    "abstract" : "Safely access the VALUE object handle for use with the Ruby C API.",
    "name" : "withRubyValue(call:)",
    "parent_name" : "RbObject"
  },
  "types\/rbobjectaccess1.html?swift" : {
    "abstract" : "Provides services to manipulate a Ruby object:",
    "name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#call_argskwargs1" : {
    "abstract" : "Call a Ruby object method.",
    "name" : "call(_:args:kwArgs:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#call_argskwargsblock1" : {
    "abstract" : "Call a Ruby object method passing a Ruby Proc as a block.",
    "name" : "call(_:args:kwArgs:block:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#call_argskwargsblockcall1" : {
    "abstract" : "Call a Ruby object method passing Swift code as a block used immediately.",
    "name" : "call(_:args:kwArgs:blockCall:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#call_argskwargsblockretentionblockcall1" : {
    "abstract" : "Call a Ruby object method passing Swift code as a block.",
    "name" : "call(_:args:kwArgs:blockRetention:blockCall:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#callsymbolargskwargs1" : {
    "abstract" : "Call a Ruby object method using a symbol.",
    "name" : "call(symbol:args:kwArgs:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#callsymbolargskwargsblock1" : {
    "abstract" : "Call a Ruby object method using a symbol passing a Ruby Proc as a block.",
    "name" : "call(symbol:args:kwArgs:block:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#callsymbolargskwargsblockcall1" : {
    "abstract" : "Call a Ruby object method using a symbol passing Swift code as a block used immediately.",
    "name" : "call(symbol:args:kwArgs:blockCall:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#callsymbolargskwargsblockretentionblockcall1" : {
    "abstract" : "Call a Ruby object method using a symbol passing Swift code as a block.",
    "name" : "call(symbol:args:kwArgs:blockRetention:blockCall:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#failable" : {
    "abstract" : "Get a version of this API that returns nil instead of throwing errors.\nSee RbFailableAccess.",
    "name" : "failable",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#get_1" : {
    "abstract" : "Get some kind of Ruby object based on the name parameter:",
    "name" : "get(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getattribute_1" : {
    "abstract" : "Get an attribute of a Ruby object.",
    "name" : "getAttribute(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getclass_1" : {
    "abstract" : "Get an RbObject that represents a Ruby class.",
    "name" : "getClass(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getclassvar_1" : {
    "abstract" : "Get the value of a Ruby class variable that has already been written.",
    "name" : "getClassVar(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getconstant_1" : {
    "abstract" : "Get an RbObject that represents a Ruby constant.",
    "name" : "getConstant(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getglobalvar_1" : {
    "abstract" : "Get the value of a Ruby global variable.",
    "name" : "getGlobalVar(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#getinstancevar_2" : {
    "abstract" : "Get the value of a Ruby instance variable.  Creates a new one with a nil value\nif it doesn’t exist yet.",
    "name" : "getInstanceVar(_:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#setattribute_newvalue1" : {
    "abstract" : "Set an attribute of a Ruby object.",
    "name" : "setAttribute(_:newValue:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#setclassvar_newvalue1" : {
    "abstract" : "Set a Ruby class variable.  Creates a new one if it doesn’t exist yet.",
    "name" : "setClassVar(_:newValue:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#setconstant_newvalue1" : {
    "abstract" : "Bind an object to a constant name.",
    "name" : "setConstant(_:newValue:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#setglobalvar_newvalue1" : {
    "abstract" : "Set a Ruby global variable.  Creates a new one if it doesn’t exist yet.",
    "name" : "setGlobalVar(_:newValue:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectaccess1.html?swift#setinstancevar_newvalue2" : {
    "abstract" : "Set a Ruby instance variable.  Creates a new one if it doesn’t exist yet.",
    "name" : "setInstanceVar(_:newValue:)",
    "parent_name" : "RbObjectAccess"
  },
  "types\/rbobjectcollection.html?swift" : {
    "abstract" : "A view onto a Ruby array using Swift collection protocols.",
    "name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#endindex" : {
    "abstract" : "The collection’s “past the end” position—that is, the position one greater than the last valid subscript argument.",
    "name" : "endIndex",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#indexafter" : {
    "abstract" : "Returns the position immediately after the given index.",
    "name" : "index(after:)",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#init_27" : {
    "abstract" : "Create a collection from an existing Ruby array object.",
    "name" : "init(_:)",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#init2" : {
    "abstract" : "Create an empty collection - an empty Ruby array.",
    "name" : "init()",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#replacesubrange_with" : {
    "abstract" : "Replaces the specified subrange of elements with the given collection.",
    "name" : "replaceSubrange(_:with:)",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#rubyobject25" : {
    "abstract" : "The Ruby object for the underlying array.",
    "name" : "rubyObject",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#startindex" : {
    "abstract" : "The position of the first element in a nonempty collection.",
    "name" : "startIndex",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectcollection.html?swift#subscript_1" : {
    "abstract" : "Accesses the element at the specified position.",
    "name" : "subscript(_:)",
    "parent_name" : "RbObjectCollection"
  },
  "types\/rbobjectconvertible.html?swift" : {
    "abstract" : "Protocol adopted by types that can be converted to and from RbObjects.",
    "name" : "RbObjectConvertible"
  },
  "types\/rbobjectconvertible.html?swift#init_3" : {
    "abstract" : "Try to create an instance of this type from the Ruby object.",
    "name" : "init(_:)",
    "parent_name" : "RbObjectConvertible"
  },
  "types\/rbobjectconvertible.html?swift#rubyobject1" : {
    "abstract" : "A fresh Ruby object matching the current state of the Swift object.",
    "name" : "rubyObject",
    "parent_name" : "RbObjectConvertible"
  },
  "types\/rbproc.html?swift" : {
    "abstract" : "A Ruby Proc.",
    "name" : "RbProc"
  },
  "types\/rbproc.html?swift#init_28" : {
    "abstract" : "Try to initialize from a Ruby object.",
    "name" : "init(_:)",
    "parent_name" : "RbProc"
  },
  "types\/rbproc.html?swift#initobject" : {
    "abstract" : "Initialize from something that can be turned into a Ruby object.",
    "name" : "init(object:)",
    "parent_name" : "RbProc"
  },
  "types\/rbproc.html?swift#rubyobject26" : {
    "abstract" : "A Ruby object for the Proc",
    "name" : "rubyObject",
    "parent_name" : "RbProc"
  },
  "types\/rbrational.html?swift" : {
    "abstract" : "A simple interface to Ruby’s rational number support.",
    "name" : "RbRational"
  },
  "types\/rbrational.html?swift#denominator" : {
    "abstract" : "The rational number’s denominator.",
    "name" : "denominator",
    "parent_name" : "RbRational"
  },
  "types\/rbrational.html?swift#init_29" : {
    "abstract" : "Create a rational number from a Ruby object.",
    "name" : "init(_:)",
    "parent_name" : "RbRational"
  },
  "types\/rbrational.html?swift#init_30" : {
    "abstract" : "Convert some Swift data type to a rational.",
    "name" : "init(_:)",
    "parent_name" : "RbRational"
  },
  "types\/rbrational.html?swift#initnumeratordenominator" : {
    "abstract" : "Create a new rational number.  The parameters are normalized to give\na positive denominator.",
    "name" : "init(numerator:denominator:)",
    "parent_name" : "RbRational"
  },
  "types\/rbrational.html?swift#numerator" : {
    "abstract" : "The rational number’s numerator.",
    "name" : "numerator",
    "parent_name" : "RbRational"
  },
  "types\/rbrational.html?swift#rubyobject27" : {
    "abstract" : "Get a Ruby version of an RbRational.",
    "name" : "rubyObject",
    "parent_name" : "RbRational"
  },
  "types\/rbsymbol.html?swift" : {
    "abstract" : "Represent a Ruby symbol.",
    "name" : "RbSymbol"
  },
  "types\/rbsymbol.html?swift#description3" : {
    "abstract" : "A textual representation of the RbSymbol",
    "name" : "description",
    "parent_name" : "RbSymbol"
  },
  "types\/rbsymbol.html?swift#init_31" : {
    "abstract" : "Create from the name for the symbol.  No leading colon.",
    "name" : "init(_:)",
    "parent_name" : "RbSymbol"
  },
  "types\/rbsymbol.html?swift#rubyobject28" : {
    "abstract" : "A Ruby object for the symbol",
    "name" : "rubyObject",
    "parent_name" : "RbSymbol"
  },
  "types\/rbthread.html?swift" : {
    "abstract" : "This type provides a namespace for working with Ruby threads.",
    "name" : "RbThread"
  },
  "types\/rbthread.html?swift#callwithgvlcallback" : {
    "abstract" : "From a GVL-free section of code on a Ruby thread, reacquire the GVL and run some code.",
    "name" : "callWithGvl(callback:)",
    "parent_name" : "RbThread"
  },
  "types\/rbthread.html?swift#callwithoutgvlcallback" : {
    "abstract" : "From a Ruby thread, run some non-Ruby code without the GVL.",
    "name" : "callWithoutGvl(callback:)",
    "parent_name" : "RbThread"
  },
  "types\/rbthread.html?swift#callwithoutgvlunblockingcallback" : {
    "abstract" : "From a Ruby thread, run some non-Ruby code without the GVL.",
    "name" : "callWithoutGvl(unblocking:callback:)",
    "parent_name" : "RbThread"
  },
  "types\/rbthread.html?swift#createcallback" : {
    "abstract" : "Create a Ruby thread.",
    "name" : "create(callback:)",
    "parent_name" : "RbThread"
  },
  "types\/rbthread.html?swift#isrubythread" : {
    "abstract" : "Does the Ruby VM know about the current thread?",
    "name" : "isRubyThread()",
    "parent_name" : "RbThread"
  },
  "types\/rbthread\/unblockingfunc.html?swift" : {
    "abstract" : "A way to unblock a thread executing inside a callWithoutGvl section.",
    "name" : "UnblockingFunc",
    "parent_name" : "RbThread"
  },
  "types\/rbthread\/unblockingfunc.html?swift#custom_" : {
    "abstract" : "A custom unblocking function.",
    "name" : "custom(_:)",
    "parent_name" : "UnblockingFunc"
  },
  "types\/rbthread\/unblockingfunc.html?swift#io" : {
    "abstract" : "Same as RUBY_UBF_IO",
    "name" : "io",
    "parent_name" : "UnblockingFunc"
  },
  "types\/rbtype.html?swift" : {
    "abstract" : "The type of a Ruby VALUE as wrapped by RbObject.",
    "name" : "RbType"
  },
  "types\/rbtype.html?swift#t_array" : {
    "abstract" : "RUBY_T_ARRAY",
    "name" : "T_ARRAY",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_bignum" : {
    "abstract" : "RUBY_T_BIGNUM",
    "name" : "T_BIGNUM",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_class" : {
    "abstract" : "RUBY_T_CLASS",
    "name" : "T_CLASS",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_complex" : {
    "abstract" : "RUBY_T_COMPLEX",
    "name" : "T_COMPLEX",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_data" : {
    "abstract" : "RUBY_T_DATA",
    "name" : "T_DATA",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_false" : {
    "abstract" : "RUBY_T_FALSE",
    "name" : "T_FALSE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_file" : {
    "abstract" : "RUBY_T_FILE",
    "name" : "T_FILE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_fixnum" : {
    "abstract" : "RUBY_T_FIXNUM",
    "name" : "T_FIXNUM",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_float" : {
    "abstract" : "RUBY_T_FLOAT",
    "name" : "T_FLOAT",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_hash" : {
    "abstract" : "RUBY_T_HASH",
    "name" : "T_HASH",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_iclass" : {
    "abstract" : "RUBY_T_ICLASS",
    "name" : "T_ICLASS",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_imemo" : {
    "abstract" : "RUBY_T_IMEMO",
    "name" : "T_IMEMO",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_match" : {
    "abstract" : "RUBY_T_MATCH",
    "name" : "T_MATCH",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_module" : {
    "abstract" : "RUBY_T_MODULE",
    "name" : "T_MODULE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_moved" : {
    "abstract" : "RUBY_T_MOVED",
    "name" : "T_MOVED",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_nil" : {
    "abstract" : "RUBY_T_NIL",
    "name" : "T_NIL",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_node" : {
    "abstract" : "RUBY_T_NODE",
    "name" : "T_NODE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_none" : {
    "abstract" : "RUBY_T_NONE",
    "name" : "T_NONE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_object" : {
    "abstract" : "RUBY_T_OBJECT",
    "name" : "T_OBJECT",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_rational" : {
    "abstract" : "RUBY_T_RATIONAL",
    "name" : "T_RATIONAL",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_regexp" : {
    "abstract" : "RUBY_T_REGEXP",
    "name" : "T_REGEXP",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_string" : {
    "abstract" : "RUBY_T_STRING",
    "name" : "T_STRING",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_struct" : {
    "abstract" : "RUBY_T_STRUCT",
    "name" : "T_STRUCT",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_symbol" : {
    "abstract" : "RUBY_T_SYMBOL",
    "name" : "T_SYMBOL",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_true" : {
    "abstract" : "RUBY_T_TRUE",
    "name" : "T_TRUE",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_undef" : {
    "abstract" : "RUBY_T_UNDEF",
    "name" : "T_UNDEF",
    "parent_name" : "RbType"
  },
  "types\/rbtype.html?swift#t_zombie" : {
    "abstract" : "RUBY_T_ZOMBIE",
    "name" : "T_ZOMBIE",
    "parent_name" : "RbType"
  }
}